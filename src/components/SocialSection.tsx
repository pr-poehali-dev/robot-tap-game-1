import { useState, useEffect } from 'react'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import Icon from '@/components/ui/icon'
import { User } from './GameSection'

interface SocialSectionProps {
  currentUser: User | null
}

interface FriendRequest {
  id: string
  from: string
  to: string
  timestamp: string
}

interface Gift {
  id: string
  from: string
  to: string
  amount: number
  message: string
  timestamp: string
}

interface ChatMessage {
  id: string
  username: string
  message: string
  timestamp: string
}

export default function SocialSection({ currentUser }: SocialSectionProps) {
  const [activeTab, setActiveTab] = useState<'leaderboard' | 'friends' | 'chat'>('leaderboard')
  const [friendUsername, setFriendUsername] = useState('')
  const [giftAmount, setGiftAmount] = useState(1000)
  const [giftMessage, setGiftMessage] = useState('')
  const [giftToUser, setGiftToUser] = useState('')
  const [chatMessage, setChatMessage] = useState('')

  if (!currentUser) {
    return (
      <div className="text-center space-y-4">
        <Icon name="Lock" size={64} className="mx-auto text-muted-foreground" />
        <h3 className="text-xl font-semibold">–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
        <p className="text-muted-foreground">–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º</p>
      </div>
    )
  }

  // –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
  const getLeaderboard = (): Array<User & { rank: number }> => {
    const users: User[] = JSON.parse(localStorage.getItem('robotGameUsers') || '[]')
    return users
      .sort((a, b) => b.gameStats.totalEarned - a.gameStats.totalEarned)
      .map((user, index) => ({ ...user, rank: index + 1 }))
      .slice(0, 50)
  }

  // –î—Ä—É–∑—å—è
  const getFriends = (): User[] => {
    const friendIds: string[] = JSON.parse(localStorage.getItem(`friends_${currentUser.id}`) || '[]')
    const users: User[] = JSON.parse(localStorage.getItem('robotGameUsers') || '[]')
    return users.filter(user => friendIds.includes(user.id))
  }

  const getFriendRequests = (): FriendRequest[] => {
    return JSON.parse(localStorage.getItem(`friendRequests_${currentUser.id}`) || '[]')
  }

  const sendFriendRequest = () => {
    if (!friendUsername.trim()) return
    
    const users: User[] = JSON.parse(localStorage.getItem('robotGameUsers') || '[]')
    const targetUser = users.find(u => u.username.toLowerCase() === friendUsername.toLowerCase().trim())
    
    if (!targetUser) {
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
      return
    }
    
    if (targetUser.id === currentUser.id) {
      alert('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è!')
      return
    }

    const friends = getFriends()
    if (friends.some(f => f.id === targetUser.id)) {
      alert('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∞—à –¥—Ä—É–≥!')
      return
    }

    const requests: FriendRequest[] = JSON.parse(localStorage.getItem(`friendRequests_${targetUser.id}`) || '[]')
    if (requests.some(r => r.from === currentUser.id)) {
      alert('–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
      return
    }

    const newRequest: FriendRequest = {
      id: Date.now().toString(),
      from: currentUser.id,
      to: targetUser.id,
      timestamp: new Date().toISOString()
    }

    requests.push(newRequest)
    localStorage.setItem(`friendRequests_${targetUser.id}`, JSON.stringify(requests))
    setFriendUsername('')
    alert('–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
  }

  const acceptFriendRequest = (request: FriendRequest) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥—Ä—É–∑—å—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const myFriends: string[] = JSON.parse(localStorage.getItem(`friends_${currentUser.id}`) || '[]')
    const theirFriends: string[] = JSON.parse(localStorage.getItem(`friends_${request.from}`) || '[]')
    
    myFriends.push(request.from)
    theirFriends.push(currentUser.id)
    
    localStorage.setItem(`friends_${currentUser.id}`, JSON.stringify(myFriends))
    localStorage.setItem(`friends_${request.from}`, JSON.stringify(theirFriends))
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const requests = getFriendRequests().filter(r => r.id !== request.id)
    localStorage.setItem(`friendRequests_${currentUser.id}`, JSON.stringify(requests))
    
    alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è!')
    window.location.reload()
  }

  const rejectFriendRequest = (request: FriendRequest) => {
    const requests = getFriendRequests().filter(r => r.id !== request.id)
    localStorage.setItem(`friendRequests_${currentUser.id}`, JSON.stringify(requests))
    alert('–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω')
    window.location.reload()
  }

  // –ü–æ–¥–∞—Ä–∫–∏
  const sendGift = () => {
    if (!giftToUser.trim() || giftAmount <= 0) return
    
    if (currentUser.gameStats.coins < giftAmount) {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!')
      return
    }

    const users: User[] = JSON.parse(localStorage.getItem('robotGameUsers') || '[]')
    const targetUser = users.find(u => u.username.toLowerCase() === giftToUser.toLowerCase().trim())
    
    if (!targetUser) {
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
      return
    }

    const friends = getFriends()
    if (!friends.some(f => f.id === targetUser.id)) {
      alert('–ü–æ–¥–∞—Ä–∫–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è–º!')
      return
    }

    // –£–º–µ–Ω—å—à–∞–µ–º –º–æ–Ω–µ—Ç—ã —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const senderIndex = users.findIndex(u => u.id === currentUser.id)
    if (senderIndex !== -1) {
      users[senderIndex].gameStats.coins -= giftAmount
      localStorage.setItem('robotGameUsers', JSON.stringify(users))
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const gifts: Gift[] = JSON.parse(localStorage.getItem(`gifts_${targetUser.id}`) || '[]')
    const newGift: Gift = {
      id: Date.now().toString(),
      from: currentUser.username,
      to: targetUser.id,
      amount: giftAmount,
      message: giftMessage || '–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥—Ä—É–≥–∞!',
      timestamp: new Date().toISOString()
    }

    gifts.push(newGift)
    localStorage.setItem(`gifts_${targetUser.id}`, JSON.stringify(gifts))
    
    setGiftToUser('')
    setGiftAmount(1000)
    setGiftMessage('')
    alert('–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
    window.location.reload()
  }

  const getMyGifts = (): Gift[] => {
    return JSON.parse(localStorage.getItem(`gifts_${currentUser.id}`) || '[]')
  }

  const claimGift = (gift: Gift) => {
    const users: User[] = JSON.parse(localStorage.getItem('robotGameUsers') || '[]')
    const userIndex = users.findIndex(u => u.id === currentUser.id)
    
    if (userIndex !== -1) {
      users[userIndex].gameStats.coins += gift.amount
      localStorage.setItem('robotGameUsers', JSON.stringify(users))
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
    const gifts = getMyGifts().filter(g => g.id !== gift.id)
    localStorage.setItem(`gifts_${currentUser.id}`, JSON.stringify(gifts))
    
    alert(`–ü–æ–ª—É—á–µ–Ω–æ ${gift.amount.toLocaleString()} –º–æ–Ω–µ—Ç –æ—Ç ${gift.from}!`)
    window.location.reload()
  }

  // –ß–∞—Ç
  const getChatMessages = (): ChatMessage[] => {
    return JSON.parse(localStorage.getItem('globalChat') || '[]')
      .sort((a: ChatMessage, b: ChatMessage) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())
      .slice(0, 50)
  }

  const sendChatMessage = () => {
    if (!chatMessage.trim()) return

    const messages: ChatMessage[] = JSON.parse(localStorage.getItem('globalChat') || '[]')
    const newMessage: ChatMessage = {
      id: Date.now().toString(),
      username: currentUser.username,
      message: chatMessage.trim(),
      timestamp: new Date().toISOString()
    }

    messages.unshift(newMessage)
    // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π
    const trimmedMessages = messages.slice(0, 1000)
    localStorage.setItem('globalChat', JSON.stringify(trimmedMessages))
    
    setChatMessage('')
  }

  useEffect(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(() => {
      if (activeTab === 'chat') {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        window.dispatchEvent(new Event('storage'))
      }
    }, 5000)

    return () => clearInterval(interval)
  }, [activeTab])

  const leaderboard = getLeaderboard()
  const friends = getFriends()
  const friendRequests = getFriendRequests()
  const myGifts = getMyGifts()
  const chatMessages = getChatMessages()

  return (
    <div className="space-y-4">
      <div className="text-center space-y-2">
        <h2 className="text-2xl font-bold">üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</h2>
        <p className="text-muted-foreground">–û–±—â–∞–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏</p>
      </div>

      {/* –¢–∞–±—ã */}
      <div className="flex gap-1 p-1 bg-muted rounded-lg">
        <button
          onClick={() => setActiveTab('leaderboard')}
          className={`flex-1 py-2 px-3 rounded text-sm font-medium transition-colors ${
            activeTab === 'leaderboard' ? 'bg-background shadow-sm' : 'hover:bg-muted-foreground/10'
          }`}
        >
          üèÜ –†–µ–π—Ç–∏–Ω–≥
        </button>
        <button
          onClick={() => setActiveTab('friends')}
          className={`flex-1 py-2 px-3 rounded text-sm font-medium transition-colors ${
            activeTab === 'friends' ? 'bg-background shadow-sm' : 'hover:bg-muted-foreground/10'
          }`}
        >
          üë´ –î—Ä—É–∑—å—è {friendRequests.length > 0 && <Badge className="ml-1 bg-red-500">{friendRequests.length}</Badge>}
        </button>
        <button
          onClick={() => setActiveTab('chat')}
          className={`flex-1 py-2 px-3 rounded text-sm font-medium transition-colors ${
            activeTab === 'chat' ? 'bg-background shadow-sm' : 'hover:bg-muted-foreground/10'
          }`}
        >
          üí¨ –ß–∞—Ç
        </button>
      </div>

      {/* –†–µ–π—Ç–∏–Ω–≥ */}
      {activeTab === 'leaderboard' && (
        <div className="space-y-3">
          <h3 className="font-semibold text-center">üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤</h3>
          {leaderboard.map(user => (
            <Card key={user.id} className={user.id === currentUser.id ? 'border-blue-300 bg-blue-50' : ''}>
              <CardContent className="p-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <span className={`font-bold ${
                      user.rank === 1 ? 'text-yellow-500' :
                      user.rank === 2 ? 'text-gray-500' :
                      user.rank === 3 ? 'text-amber-600' : 'text-muted-foreground'
                    }`}>
                      #{user.rank}
                    </span>
                    <div>
                      <p className="font-medium">
                        {user.username}
                        {user.id === currentUser.id && ' (–í—ã)'}
                      </p>
                      <p className="text-xs text-muted-foreground">
                        –£—Ä–æ–≤–µ–Ω—å {user.gameStats.level}
                      </p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-semibold">{user.gameStats.totalEarned.toLocaleString()}</p>
                    <p className="text-xs text-muted-foreground">–º–æ–Ω–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* –î—Ä—É–∑—å—è */}
      {activeTab === 'friends' && (
        <div className="space-y-4">
          {/* –ó–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è */}
          {friendRequests.length > 0 && (
            <Card className="border-orange-200 bg-orange-50">
              <CardContent className="p-4">
                <h4 className="font-semibold mb-3">üì© –ó–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è</h4>
                {friendRequests.map(request => {
                  const users: User[] = JSON.parse(localStorage.getItem('robotGameUsers') || '[]')
                  const fromUser = users.find(u => u.id === request.from)
                  if (!fromUser) return null

                  return (
                    <div key={request.id} className="flex items-center justify-between p-2 border rounded">
                      <span>{fromUser.username}</span>
                      <div className="flex gap-2">
                        <Button size="sm" onClick={() => acceptFriendRequest(request)} className="bg-green-500 hover:bg-green-600">
                          ‚úì
                        </Button>
                        <Button size="sm" variant="outline" onClick={() => rejectFriendRequest(request)}>
                          ‚úó
                        </Button>
                      </div>
                    </div>
                  )
                })}
              </CardContent>
            </Card>
          )}

          {/* –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞ */}
          <Card>
            <CardContent className="p-4">
              <h4 className="font-semibold mb-3">‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞</h4>
              <div className="flex gap-2">
                <input
                  type="text"
                  value={friendUsername}
                  onChange={(e) => setFriendUsername(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
                  className="flex-1 px-3 py-2 border border-gray-300 rounded"
                />
                <Button onClick={sendFriendRequest}>–î–æ–±–∞–≤–∏—Ç—å</Button>
              </div>
            </CardContent>
          </Card>

          {/* –ú–æ–∏ –ø–æ–¥–∞—Ä–∫–∏ */}
          {myGifts.length > 0 && (
            <Card className="border-green-200 bg-green-50">
              <CardContent className="p-4">
                <h4 className="font-semibold mb-3">üéÅ –í–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏</h4>
                {myGifts.map(gift => (
                  <div key={gift.id} className="flex items-center justify-between p-2 border rounded mb-2">
                    <div>
                      <p className="font-medium">–û—Ç {gift.from}</p>
                      <p className="text-sm text-muted-foreground">{gift.message}</p>
                    </div>
                    <div className="text-right">
                      <p className="font-semibold">{gift.amount.toLocaleString()} –º–æ–Ω–µ—Ç</p>
                      <Button size="sm" onClick={() => claimGift(gift)} className="bg-green-500 hover:bg-green-600">
                        –ü–æ–ª—É—á–∏—Ç—å
                      </Button>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          )}

          {/* –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ */}
          <Card>
            <CardContent className="p-4">
              <h4 className="font-semibold mb-3">üéÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫</h4>
              <div className="space-y-3">
                <input
                  type="text"
                  value={giftToUser}
                  onChange={(e) => setGiftToUser(e.target.value)}
                  placeholder="–ò–º—è –¥—Ä—É–≥–∞..."
                  className="w-full px-3 py-2 border border-gray-300 rounded"
                />
                <input
                  type="number"
                  value={giftAmount}
                  onChange={(e) => setGiftAmount(parseInt(e.target.value) || 0)}
                  placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç..."
                  min="100"
                  max={currentUser.gameStats.coins}
                  className="w-full px-3 py-2 border border-gray-300 rounded"
                />
                <input
                  type="text"
                  value={giftMessage}
                  onChange={(e) => setGiftMessage(e.target.value)}
                  placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)..."
                  className="w-full px-3 py-2 border border-gray-300 rounded"
                />
                <Button onClick={sendGift} className="w-full">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫</Button>
              </div>
            </CardContent>
          </Card>

          {/* –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π */}
          <Card>
            <CardContent className="p-4">
              <h4 className="font-semibold mb-3">üë´ –ú–æ–∏ –¥—Ä—É–∑—å—è ({friends.length})</h4>
              {friends.length === 0 ? (
                <p className="text-muted-foreground text-center py-4">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</p>
              ) : (
                friends.map(friend => (
                  <div key={friend.id} className="flex items-center justify-between p-2 border rounded mb-2">
                    <div>
                      <p className="font-medium">{friend.username}</p>
                      <p className="text-xs text-muted-foreground">
                        –£—Ä–æ–≤–µ–Ω—å {friend.gameStats.level} ‚Ä¢ {friend.gameStats.totalEarned.toLocaleString()} –º–æ–Ω–µ—Ç
                      </p>
                    </div>
                    <Badge variant="outline">–î—Ä—É–≥</Badge>
                  </div>
                ))
              )}
            </CardContent>
          </Card>
        </div>
      )}

      {/* –ß–∞—Ç */}
      {activeTab === 'chat' && (
        <div className="space-y-4">
          {/* –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */}
          <Card>
            <CardContent className="p-4">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={chatMessage}
                  onChange={(e) => setChatMessage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && sendChatMessage()}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  className="flex-1 px-3 py-2 border border-gray-300 rounded"
                  maxLength={200}
                />
                <Button onClick={sendChatMessage}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Button>
              </div>
            </CardContent>
          </Card>

          {/* –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ */}
          <Card>
            <CardContent className="p-4">
              <h4 className="font-semibold mb-3">üí¨ –û–±—â–∏–π —á–∞—Ç</h4>
              <div className="space-y-2 max-h-96 overflow-y-auto">
                {chatMessages.length === 0 ? (
                  <p className="text-muted-foreground text-center py-4">–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
                ) : (
                  chatMessages.map(message => (
                    <div 
                      key={message.id} 
                      className={`p-2 rounded ${
                        message.username === currentUser.username ? 'bg-blue-50 border-blue-200 border' : 'bg-gray-50'
                      }`}
                    >
                      <div className="flex justify-between items-start">
                        <p className="font-medium text-sm">{message.username}</p>
                        <span className="text-xs text-muted-foreground">
                          {new Date(message.timestamp).toLocaleTimeString()}
                        </span>
                      </div>
                      <p className="text-sm mt-1">{message.message}</p>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}