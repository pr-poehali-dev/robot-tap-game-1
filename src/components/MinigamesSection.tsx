import { useState } from 'react'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import Icon from '@/components/ui/icon'
import { User } from './GameSection'

interface MinigamesSectionProps {
  currentUser: User | null
  onUpdateCoins: (newCoins: number) => void
}

export default function MinigamesSection({ currentUser, onUpdateCoins }: MinigamesSectionProps) {
  const [rouletteSpinning, setRouletteSpinning] = useState(false)
  const [rouletteResult, setRouletteResult] = useState<number | null>(null)
  const [slotSpinning, setSlotSpinning] = useState(false)
  const [slotResult, setSlotResult] = useState<string[]>(['üçã', 'üçã', 'üçã'])
  const [guessNumber, setGuessNumber] = useState('')
  const [guessResult, setGuessResult] = useState<string | null>(null)

  if (!currentUser) {
    return (
      <div className="text-center space-y-4">
        <Icon name="Lock" size={64} className="mx-auto text-muted-foreground" />
        <h3 className="text-xl font-semibold">–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
        <p className="text-muted-foreground">–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å</p>
      </div>
    )
  }

  // –†—É–ª–µ—Ç–∫–∞ —É–¥–∞—á–∏
  const spinRoulette = (bet: number) => {
    if (currentUser.gameStats.coins < bet) {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!')
      return
    }

    setRouletteSpinning(true)
    setRouletteResult(null)
    
    // –£–º–µ–Ω—å—à–∞–µ–º –º–æ–Ω–µ—Ç—ã –Ω–∞ —Å—Ç–∞–≤–∫—É
    const newCoins = currentUser.gameStats.coins - bet
    onUpdateCoins(newCoins)

    setTimeout(() => {
      const result = Math.floor(Math.random() * 37) // 0-36 –∫–∞–∫ –≤ —Ä—É–ª–µ—Ç–∫–µ
      setRouletteResult(result)
      setRouletteSpinning(false)

      let winAmount = 0
      let winMessage = ''

      if (result === 0) {
        // –ó–µ—Ä–æ - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏
        winAmount = bet
        winMessage = 'üü¢ –ó–ï–†–û! –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏!'
      } else if (result % 2 === 0) {
        // –ß–µ—Ç–Ω–æ–µ - x1.8
        winAmount = Math.floor(bet * 1.8)
        winMessage = `‚ö™ –ß–µ—Ç–Ω–æ–µ ${result}! –í—ã–∏–≥—Ä—ã—à x1.8!`
      } else {
        // –ù–µ—á–µ—Ç–Ω–æ–µ - x2.2  
        winAmount = Math.floor(bet * 2.2)
        winMessage = `‚ö´ –ù–µ—á–µ—Ç–Ω–æ–µ ${result}! –í—ã–∏–≥—Ä—ã—à x2.2!`
      }

      if (winAmount > 0) {
        setTimeout(() => {
          onUpdateCoins(newCoins + winAmount)
          alert(winMessage + ` +${winAmount.toLocaleString()} –º–æ–Ω–µ—Ç!`)
        }, 1000)
      } else {
        setTimeout(() => {
          alert(`–ß–∏—Å–ª–æ ${result}. –ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üçÄ`)
        }, 1000)
      }
    }, 2000)
  }

  // –°–ª–æ—Ç –º–∞—à–∏–Ω–∞  
  const spinSlots = (bet: number) => {
    if (currentUser.gameStats.coins < bet) {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!')
      return
    }

    setSlotSpinning(true)
    
    // –£–º–µ–Ω—å—à–∞–µ–º –º–æ–Ω–µ—Ç—ã –Ω–∞ —Å—Ç–∞–≤–∫—É
    const newCoins = currentUser.gameStats.coins - bet
    onUpdateCoins(newCoins)

    const symbols = ['üçã', 'üçí', 'üçä', '‚≠ê', 'üíé', 'üëë', 'üéØ']
    
    setTimeout(() => {
      const result = [
        symbols[Math.floor(Math.random() * symbols.length)],
        symbols[Math.floor(Math.random() * symbols.length)],
        symbols[Math.floor(Math.random() * symbols.length)]
      ]
      
      setSlotResult(result)
      setSlotSpinning(false)

      let winAmount = 0
      let winMessage = ''

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
      if (result[0] === result[1] && result[1] === result[2]) {
        // –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
        const multipliers: { [key: string]: number } = {
          'üçã': 5, 'üçí': 8, 'üçä': 10, '‚≠ê': 15, 'üíé': 25, 'üëë': 50, 'üéØ': 100
        }
        const multiplier = multipliers[result[0]] || 5
        winAmount = bet * multiplier
        winMessage = `üéä –î–ñ–ï–ö–ü–û–¢! –¢—Ä–∏ ${result[0]}! –í—ã–∏–≥—Ä—ã—à x${multiplier}!`
      } else if (result[0] === result[1] || result[1] === result[2] || result[0] === result[2]) {
        // –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
        winAmount = bet * 2
        winMessage = `üéâ –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö! –í—ã–∏–≥—Ä—ã—à x2!`
      }

      if (winAmount > 0) {
        setTimeout(() => {
          onUpdateCoins(newCoins + winAmount)
          alert(winMessage + ` +${winAmount.toLocaleString()} –º–æ–Ω–µ—Ç!`)
        }, 1000)
      } else {
        setTimeout(() => {
          alert('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üé∞')
        }, 1000)
      }
    }, 2000)
  }

  // –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
  const playGuessNumber = (bet: number) => {
    if (currentUser.gameStats.coins < bet) {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!')
      return
    }

    const playerNumber = parseInt(guessNumber)
    if (!playerNumber || playerNumber < 1 || playerNumber > 100) {
      alert('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!')
      return
    }

    // –£–º–µ–Ω—å—à–∞–µ–º –º–æ–Ω–µ—Ç—ã –Ω–∞ —Å—Ç–∞–≤–∫—É
    const newCoins = currentUser.gameStats.coins - bet
    onUpdateCoins(newCoins)

    const winningNumber = Math.floor(Math.random() * 100) + 1
    
    let winAmount = 0
    let message = ''

    const difference = Math.abs(playerNumber - winningNumber)
    
    if (difference === 0) {
      // –¢–æ—á–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ
      winAmount = bet * 50
      message = `üéØ –¢–û–ß–ù–û–ï –ü–û–ü–ê–î–ê–ù–ò–ï! –ß–∏—Å–ª–æ –±—ã–ª–æ ${winningNumber}! –í—ã–∏–≥—Ä—ã—à x50!`
    } else if (difference <= 3) {
      // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ
      winAmount = bet * 10
      message = `üî• –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ! –ë—ã–ª–æ ${winningNumber}, –≤—ã —Å–∫–∞–∑–∞–ª–∏ ${playerNumber}. –í—ã–∏–≥—Ä—ã—à x10!`
    } else if (difference <= 10) {
      // –ë–ª–∏–∑–∫–æ
      winAmount = bet * 3
      message = `üëè –ù–µ–ø–ª–æ—Ö–æ! –ë—ã–ª–æ ${winningNumber}, –≤—ã —Å–∫–∞–∑–∞–ª–∏ ${playerNumber}. –í—ã–∏–≥—Ä—ã—à x3!`
    } else {
      message = `üòî –ß–∏—Å–ª–æ –±—ã–ª–æ ${winningNumber}, –≤—ã —Å–∫–∞–∑–∞–ª–∏ ${playerNumber}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`
    }

    setGuessResult(message)
    setGuessNumber('')

    if (winAmount > 0) {
      setTimeout(() => {
        onUpdateCoins(newCoins + winAmount)
      }, 500)
    }

    // –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      setGuessResult(null)
    }, 5000)
  }

  return (
    <div className="space-y-4">
      <div className="text-center space-y-2">
        <h2 className="text-2xl font-bold">üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã</h2>
        <p className="text-muted-foreground">–ò—Å–ø—ã—Ç–∞–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É!</p>
        <Badge variant="outline" className="text-sm">
          üí∞ –ë–∞–ª–∞–Ω—Å: {currentUser.gameStats.coins.toLocaleString()} –º–æ–Ω–µ—Ç
        </Badge>
      </div>

      {/* –†—É–ª–µ—Ç–∫–∞ —É–¥–∞—á–∏ */}
      <Card>
        <CardContent className="p-6">
          <div className="text-center space-y-4">
            <div className="flex items-center justify-center gap-2 mb-4">
              <Icon name="RotateCcw" size={24} />
              <h3 className="text-xl font-bold">üéØ –†—É–ª–µ—Ç–∫–∞ —É–¥–∞—á–∏</h3>
            </div>
            
            <div className={`text-6xl mb-4 ${rouletteSpinning ? 'animate-spin' : ''}`}>
              üé∞
            </div>

            {rouletteResult !== null && !rouletteSpinning && (
              <div className="text-2xl font-bold mb-4">
                –í—ã–ø–∞–ª–æ: {rouletteResult}
              </div>
            )}

            <div className="text-sm text-muted-foreground mb-4">
              <div>‚Ä¢ –ß–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ: –≤—ã–∏–≥—Ä—ã—à x1.8</div>
              <div>‚Ä¢ –ù–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ: –≤—ã–∏–≥—Ä—ã—à x2.2</div>
              <div>‚Ä¢ –ó–µ—Ä–æ (0): –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏</div>
            </div>

            <div className="flex gap-2 justify-center">
              <Button 
                onClick={() => spinRoulette(1000)}
                disabled={rouletteSpinning || currentUser.gameStats.coins < 1000}
                className="bg-red-500 hover:bg-red-600"
              >
                –°—Ç–∞–≤–∫–∞ 1K
              </Button>
              <Button 
                onClick={() => spinRoulette(5000)}
                disabled={rouletteSpinning || currentUser.gameStats.coins < 5000}
                className="bg-orange-500 hover:bg-orange-600"
              >
                –°—Ç–∞–≤–∫–∞ 5K
              </Button>
              <Button 
                onClick={() => spinRoulette(10000)}
                disabled={rouletteSpinning || currentUser.gameStats.coins < 10000}
                className="bg-yellow-500 hover:bg-yellow-600"
              >
                –°—Ç–∞–≤–∫–∞ 10K
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –°–ª–æ—Ç –º–∞—à–∏–Ω–∞ */}
      <Card>
        <CardContent className="p-6">
          <div className="text-center space-y-4">
            <div className="flex items-center justify-center gap-2 mb-4">
              <Icon name="Zap" size={24} />
              <h3 className="text-xl font-bold">üé∞ –°–ª–æ—Ç –º–∞—à–∏–Ω–∞</h3>
            </div>
            
            <div className="flex justify-center gap-4 text-4xl mb-4 p-4 bg-muted rounded-lg">
              {slotResult.map((symbol, index) => (
                <div key={index} className={slotSpinning ? 'animate-bounce' : ''}>
                  {symbol}
                </div>
              ))}
            </div>

            <div className="text-xs text-muted-foreground mb-4">
              <div>üéØ x100 | üëë x50 | üíé x25 | ‚≠ê x15</div>
              <div>üçä x10 | üçí x8 | üçã x5 | –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö x2</div>
            </div>

            <div className="flex gap-2 justify-center">
              <Button 
                onClick={() => spinSlots(2000)}
                disabled={slotSpinning || currentUser.gameStats.coins < 2000}
                className="bg-purple-500 hover:bg-purple-600"
              >
                –°—Ç–∞–≤–∫–∞ 2K
              </Button>
              <Button 
                onClick={() => spinSlots(10000)}
                disabled={slotSpinning || currentUser.gameStats.coins < 10000}
                className="bg-indigo-500 hover:bg-indigo-600"
              >
                –°—Ç–∞–≤–∫–∞ 10K
              </Button>
              <Button 
                onClick={() => spinSlots(25000)}
                disabled={slotSpinning || currentUser.gameStats.coins < 25000}
                className="bg-pink-500 hover:bg-pink-600"
              >
                –°—Ç–∞–≤–∫–∞ 25K
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ */}
      <Card>
        <CardContent className="p-6">
          <div className="text-center space-y-4">
            <div className="flex items-center justify-center gap-2 mb-4">
              <Icon name="Hash" size={24} />
              <h3 className="text-xl font-bold">üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ</h3>
            </div>
            
            <p className="text-sm text-muted-foreground">
              –£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
            </p>

            <div className="max-w-xs mx-auto space-y-3">
              <input
                type="number"
                min="1"
                max="100"
                value={guessNumber}
                onChange={(e) => setGuessNumber(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ..."
                className="w-full px-3 py-2 border border-gray-300 rounded-lg text-center"
              />

              {guessResult && (
                <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <p className="text-sm">{guessResult}</p>
                </div>
              )}
            </div>

            <div className="text-xs text-muted-foreground mb-4">
              <div>‚Ä¢ –¢–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ: x50</div>
              <div>‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ¬±3: x10</div>
              <div>‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ¬±10: x3</div>
            </div>

            <div className="flex gap-2 justify-center">
              <Button 
                onClick={() => playGuessNumber(1000)}
                disabled={currentUser.gameStats.coins < 1000}
                className="bg-green-500 hover:bg-green-600"
              >
                –°—Ç–∞–≤–∫–∞ 1K
              </Button>
              <Button 
                onClick={() => playGuessNumber(5000)}
                disabled={currentUser.gameStats.coins < 5000}
                className="bg-teal-500 hover:bg-teal-600"
              >
                –°—Ç–∞–≤–∫–∞ 5K
              </Button>
              <Button 
                onClick={() => playGuessNumber(15000)}
                disabled={currentUser.gameStats.coins < 15000}
                className="bg-cyan-500 hover:bg-cyan-600"
              >
                –°—Ç–∞–≤–∫–∞ 15K
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}